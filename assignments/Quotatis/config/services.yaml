# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  country: "UK"
  currency: "Â£"
  env(SENTRY_DSN): ""
  env(DATABASE_URL):
  env(NS_SSO_KEY): ""

services:
  # default configuration for services in *this* file
  _defaults:
    public: true
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    # bind these global arguments to all services
    bind:
      string $country: '%country%'
      string $currency: '%currency%'
      bool $isModeDev: '%kernel.debug%'

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Helper/'
      - '../src/Kernel.php'
      - '../src/Tests/'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller/'
    tags: [ 'controller.service_arguments' ]

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
  Monolog\Processor\PsrLogMessageProcessor:
    tags: { name: monolog.processor, handler: sentry }

  Sentry\Monolog\Handler:
    arguments:
      $hub: '@Sentry\State\HubInterface'
      $level: !php/const Monolog\Logger::ERROR

  App\Service\SsoTokenService:
    arguments:
      $ssoKey: '%env(NS_SSO_KEY)%'
